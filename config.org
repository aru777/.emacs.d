* Basic quality of life settings
** Settings (mostly) from emacs
#+BEGIN_SRC emacs-lisp
    ;; Highlight matching brackets
    (show-paren-mode 1)

    ;; reduce the frequency of garbage collection by making it happen on
    ;; each 50MB of allocated data (the default is on every 0.76MB)
    (setq gc-cons-threshold 50000000)

    ;; no start up screen
    (setq inhibit-startup-message t)

    ;; Emacs modes typically provide a standard means to change the
    ;; indentation width -- eg. c-basic-offset: use that to adjust your
    ;; personal indentation width, while maintaining the style (and
    ;; meaning) of any files you load.
    (setq-default indent-tabs-mode nil)   ;; don't use tabs to indent
    (setq-default tab-width 2)            ;; but maintain correct appearance

    ;; mode line settings
    (line-number-mode t)
    (column-number-mode t)
    (size-indication-mode t)

    ;; stop making sounds
    (setq ring-bell-function 'ignore)

    ;; none of the bars needed
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (if window-system
      (scroll-bar-mode -1))

    ;; relative line numbers
    (setq display-line-numbers-type 'relative)
    (global-display-line-numbers-mode 1)

    ;; highlight current line
    (global-hl-line-mode +1)

    ;; disable emacs autosave mode because of super-save
    (setq auto-save-default nil)

    ;; automatically insert closing brackets
    (setq electric-pair-pairs '(
                               (?\{ . ?\})
                               (?\( . ?\))
                               (?\[ . ?\])
                               (?\" . ?\")
                               ))
    (electric-pair-mode t)
#+END_SRC
** Keep windows balanced automatically
#+BEGIN_SRC emacs-lisp
  (defadvice split-window-below (after restore-balanace-below activate)
    (balance-windows))
  (defadvice split-window-right (after restore-balance-right activate)
    (balance-windows))
  (defadvice delete-window (after restore-balance activate)
    (balance-windows))
#+END_SRC
** Quickly change config
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/init.el"))
  (global-set-key (kbd "C-c e") 'config-visit)

  (defun config-reload ()
    "Reloads ~/.emacs.d/init.el at runtime"
    (interactive)
    (load-file (expand-file-name "~/.emacs.d/init.el")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** Which key :)
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC
** Super save
Saves automatically when window loses focus
#+BEGIN_SRC emacs-lisp
  (use-package super-save
    :ensure t
    :config
    (super-save-mode +1))
#+END_SRC
** Thrift files syntax highlight
#+BEGIN_SRC emacs-lisp
  (use-package thrift
    :ensure t)
#+END_SRC
** Whitespace cleanup
#+BEGIN_SRC emacs-lisp
  ;; Nothing visual, just cleanup before save
  (use-package whitespace
    :init
    (add-hook 'before-save-hook #'whitespace-cleanup))
#+END_SRC
* Appearance
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :config
    (load-theme 'solarized-light t))
#+END_SRC
** Status line
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
      (setq spaceline-buffer-encoding-abbrev-p nil)
      (setq spaceline-line-column-p nil)
      (setq spaceline-line-p nil)
      (setq powerline-default-separator nil)
      (spaceline-spacemacs-theme))
#+END_SRC

* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
      (use-package yasnippet-snippets
        :ensure t)
      (yas-reload-all)
      (yas-global-mode 1))
#+END_SRC

* Org
** Basic settings
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
** Org packages
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c '") 'org-edit-src-code)
#+END_SRC
* Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    ;; This messes with org mode <TAB>
    ;; Can live without this, but not without <TAB> in org
    (setq evil-want-C-i-jump nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1))
#+END_SRC
* Company for autocompletion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (global-company-mode)
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 1)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+END_SRC
* Ivy + swiper + counsel
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (global-set-key (kbd "C-c C-r") 'ivy-resume))

  (use-package swiper
    :ensure t
    :config
    (global-set-key "\C-s" 'swiper))

  ;; TODO: read other features of counsel
  (use-package counsel
    :ensure t
    :config
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "M-x") 'counsel-M-x))
#+END_SRC
* C++ settings
** Autocompletion with irony
#+BEGIN_SRC emacs-lisp
  (use-package company-irony
    :requires company
    :ensure t
    :config
    (add-to-list 'company-backends 'company-irony))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :bind ("s-p" . projectile-command-map)
    :config
    (setq projectile-completion-system 'ivy)
    (projectile-global-mode +1))
#+END_SRC
